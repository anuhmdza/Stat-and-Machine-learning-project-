def clean_noaa_data(file_path):
    # Load the dataset
    df = pd.read_csv(file_path)
    
    # Standardize column names (lowercase & replace spaces)
    df.columns = df.columns.str.lower().str.replace(" ", "_")
    
    # Handle missing values
    df.dropna(inplace=True)  # Drop rows with missing values (or use fillna)
    
    # Convert date column to datetime (if applicable)
    if 'date' in df.columns:
        df['date'] = pd.to_datetime(df['date'])
    
    # Rename columns for clarity
    df.rename(columns={
        "datatype": "measurement_type",
        "value": "measurement_value"
    }, inplace=True)
    
    return df

# Clean and save NOAA data
df_noaa_clean = clean_noaa_data("noaa_climate_data.csv")
df_noaa_clean.to_csv("noaa_climate_data_clean.csv", index=False)
print(df_noaa_clean.head())

def clean_census_data(file_path):
    # Load the dataset
    df = pd.read_csv(file_path)
    
    # Standardize column names: strip spaces, lower-case, and replace spaces with underscores
    df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")
    
    # Drop any rows with missing values (or you could choose to fill them in)
    df.dropna(inplace=True)
    
    # Optionally, if you plan to do numerical analyses, remove non-numeric columns
    numeric_df = df.select_dtypes(include=['number'])
    
    # Optionally, merge the numeric columns back with any key identifiers you need, for instance:
    # numeric_df = df[['state']] if you want to keep the state column.
    
    return df, numeric_df

# Clean the Census data and retrieve both full and numeric-only dataframes
df_census_clean, df_census_numeric = clean_census_data("acs_socioeconomic_data.csv")

# Preview the cleaned full data and numeric-only data for correlation analysis
print("Cleaned Census Data:")
print(df_census_clean.head())

print("\nNumeric-Only Census Data:")
print(df_census_numeric.head())

